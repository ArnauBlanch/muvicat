apply plugin: 'com.android.application'
apply plugin: 'kotlin-platform-android'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'jacoco'

android {
    signingConfigs {}
    compileSdkVersion 27
    defaultConfig {
        applicationId "xyz.arnau.muvicat"
        minSdkVersion 16
        targetSdkVersion 27
        versionCode 1
        versionName "0.1-alpha"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
        sourceSets {
            test {
                java.srcDirs += "$projectDir/src/testShared"
            }
            androidTest {
                assets.srcDirs += files("$projectDir/schemas".toString())
                java.srcDirs += "$projectDir/src/testShared"
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            //proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable false
            jniDebuggable false
        }
        alpha {
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
            renderscriptOptimLevel 3
            minifyEnabled false
            zipAlignEnabled true
        }
        debug {
            debuggable true
            jniDebuggable false
            applicationIdSuffix ".dev"
            testCoverageEnabled true
        }
        beta {
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
            renderscriptOptimLevel 3
            minifyEnabled false
            zipAlignEnabled true
        }
    }
    buildToolsVersion '27.0.3'
    kapt {
        mapDiagnosticLocations = true
        useBuildCache = true
        // generateStubs = true
    }
    testOptions {
        unitTests {
            all {
                //jvmArgs '-noverify', '-ea'
                jacoco {
                    includeNoLocationClasses = true
                }
            }
            includeAndroidResources = true
        }
    }
    lintOptions {
        abortOnError false
    }
    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support:animated-vector-drawable:27.1.1'
    implementation 'com.android.support:recyclerview-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.0'

    // Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.retrofit2:converter-simplexml:2.4.0'
    implementation 'com.squareup.okhttp3:okhttp:3.10.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.10.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
    testImplementation 'com.squareup.okhttp3:mockwebserver:3.10.0'

    // RxJava
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.5'

    // ViewModel and LiveData
    implementation "android.arch.lifecycle:extensions:1.1.1"
    // alternatively, just ViewModel
    implementation "android.arch.lifecycle:viewmodel:1.1.1"
    // alternatively, just LiveData
    implementation "android.arch.lifecycle:livedata:1.1.1"

    kapt "android.arch.lifecycle:compiler:1.1.1"

    // Room (use 1.1.0-beta2 for latest beta)
    implementation "android.arch.persistence.room:runtime:1.1.0-beta3"
    implementation "android.arch.persistence.room:rxjava2:1.1.0-beta3"
    kapt "android.arch.persistence.room:compiler:1.1.0-beta3"

    // Paging
    implementation "android.arch.paging:runtime:1.0.0-rc1"

    // Test helpers for LiveData
    testImplementation "android.arch.core:core-testing:1.1.1"
    androidTestImplementation "android.arch.core:core-testing:1.1.1"

    // Test helpers for Room
    androidTestImplementation "android.arch.persistence.room:testing:1.1.0-beta3"

    // Dagger 2
    kapt 'com.google.dagger:dagger-compiler:2.15'
    implementation 'com.google.dagger:dagger:2.15'
    compileOnly 'javax.annotation:jsr250-api:1.0'
    implementation 'com.google.dagger:dagger-android:2.15'
    implementation 'com.google.dagger:dagger-android-support:2.15'
    // if you use the support libraries
    kapt 'com.google.dagger:dagger-android-processor:2.15'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support:support-annotations:27.1.1'
    androidTestImplementation 'com.android.support.test:runner:1.0.2-beta1'
    androidTestImplementation 'com.android.support.test:rules:1.0.2-beta1'
    androidTestImplementation('com.android.support.test.espresso:espresso-core:3.0.1', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    implementation 'com.jakewharton.timber:timber:4.7.0'

    testImplementation "org.robolectric:robolectric:3.8"
    testImplementation "org.mockito:mockito-core:2.18.0"
    implementation 'com.android.support:gridlayout-v7:27.1.1'
    implementation 'com.android.support:cardview-v7:27.1.1'
    testImplementation "org.powermock:powermock-module-junit4:2.0.0-beta.5"
    testImplementation "org.powermock:powermock-api-mockito2:2.0.0-beta.5"
    testImplementation "org.powermock:powermock-module-junit4-rule:2.0.0-beta.5"
    testImplementation "org.powermock:powermock-classloading-xstream:2.0.0-beta.5"

}

configurations {
    all {
        exclude module: 'xpp3'
    }
}

apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.1"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*',
                      '**/*Test*.*', 'android/**/*.*', '**/model/**', '**/constants/**',
                      '**/**_Impl**', '**/*_Factory.*']
    def javaClasses = fileTree(dir: "$project.buildDir/intermediates/classes/debug", excludes: fileFilter)
    def kotlinClasses = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def javaSrc = "$project.projectDir/src/main/java"
    def kotlinSrc = "$project.projectDir/src/main/kotlin"

    sourceDirectories = files([javaSrc, kotlinSrc])
    classDirectories = files([javaClasses, kotlinClasses])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}